// Code generated by protoc-gen-go. DO NOT EDIT.
// source: syncer.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "github.com/apache/servicecomb-service-center/server/core/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PullRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	Options     string `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
	Time        string `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
}

func (m *PullRequest) Reset()                    { *m = PullRequest{} }
func (m *PullRequest) String() string            { return proto1.CompactTextString(m) }
func (*PullRequest) ProtoMessage()               {}
func (*PullRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PullRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *PullRequest) GetOptions() string {
	if m != nil {
		return m.Options
	}
	return ""
}

func (m *PullRequest) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type SyncService struct {
	DomainProject string                         `protobuf:"bytes,1,opt,name=domainProject" json:"domainProject,omitempty"`
	Service       *proto2.MicroService           `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Instances     []*proto2.MicroServiceInstance `protobuf:"bytes,3,rep,name=instances" json:"instances,omitempty"`
}

func (m *SyncService) Reset()                    { *m = SyncService{} }
func (m *SyncService) String() string            { return proto1.CompactTextString(m) }
func (*SyncService) ProtoMessage()               {}
func (*SyncService) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SyncService) GetDomainProject() string {
	if m != nil {
		return m.DomainProject
	}
	return ""
}

func (m *SyncService) GetService() *proto2.MicroService {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *SyncService) GetInstances() []*proto2.MicroServiceInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type SyncData struct {
	Services []*SyncService `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *SyncData) Reset()                    { *m = SyncData{} }
func (m *SyncData) String() string            { return proto1.CompactTextString(m) }
func (*SyncData) ProtoMessage()               {}
func (*SyncData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SyncData) GetServices() []*SyncService {
	if m != nil {
		return m.Services
	}
	return nil
}

type MappingEntry struct {
	NodeName      string `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
	DomainProject string `protobuf:"bytes,2,opt,name=domainProject" json:"domainProject,omitempty"`
	OrgServiceID  string `protobuf:"bytes,3,opt,name=orgServiceID" json:"orgServiceID,omitempty"`
	OrgInstanceID string `protobuf:"bytes,4,opt,name=orgInstanceID" json:"orgInstanceID,omitempty"`
	CurServiceID  string `protobuf:"bytes,5,opt,name=curServiceID" json:"curServiceID,omitempty"`
	CurInstanceID string `protobuf:"bytes,6,opt,name=curInstanceID" json:"curInstanceID,omitempty"`
}

func (m *MappingEntry) Reset()                    { *m = MappingEntry{} }
func (m *MappingEntry) String() string            { return proto1.CompactTextString(m) }
func (*MappingEntry) ProtoMessage()               {}
func (*MappingEntry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *MappingEntry) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *MappingEntry) GetDomainProject() string {
	if m != nil {
		return m.DomainProject
	}
	return ""
}

func (m *MappingEntry) GetOrgServiceID() string {
	if m != nil {
		return m.OrgServiceID
	}
	return ""
}

func (m *MappingEntry) GetOrgInstanceID() string {
	if m != nil {
		return m.OrgInstanceID
	}
	return ""
}

func (m *MappingEntry) GetCurServiceID() string {
	if m != nil {
		return m.CurServiceID
	}
	return ""
}

func (m *MappingEntry) GetCurInstanceID() string {
	if m != nil {
		return m.CurInstanceID
	}
	return ""
}

func init() {
	proto1.RegisterType((*PullRequest)(nil), "proto.PullRequest")
	proto1.RegisterType((*SyncService)(nil), "proto.SyncService")
	proto1.RegisterType((*SyncData)(nil), "proto.SyncData")
	proto1.RegisterType((*MappingEntry)(nil), "proto.MappingEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sync service

type SyncClient interface {
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*SyncData, error)
}

type syncClient struct {
	cc *grpc.ClientConn
}

func NewSyncClient(cc *grpc.ClientConn) SyncClient {
	return &syncClient{cc}
}

func (c *syncClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*SyncData, error) {
	out := new(SyncData)
	err := grpc.Invoke(ctx, "/proto.Sync/Pull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sync service

type SyncServer interface {
	Pull(context.Context, *PullRequest) (*SyncData, error)
}

func RegisterSyncServer(s *grpc.Server, srv SyncServer) {
	s.RegisterService(&_Sync_serviceDesc, srv)
}

func _Sync_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sync/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServer).Pull(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Sync",
	HandlerType: (*SyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pull",
			Handler:    _Sync_Pull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syncer.proto",
}

func init() { proto1.RegisterFile("syncer.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbd, 0x6e, 0xc2, 0x30,
	0x14, 0x85, 0x1b, 0x08, 0x7f, 0x37, 0xb4, 0x95, 0x6e, 0x17, 0x8b, 0x2e, 0x28, 0xea, 0xc0, 0x02,
	0x03, 0x55, 0x87, 0x76, 0xa6, 0x03, 0x03, 0x15, 0x0a, 0x73, 0x87, 0xd4, 0x58, 0xc8, 0x15, 0xd8,
	0xa9, 0xed, 0x54, 0xe2, 0x61, 0xfa, 0x76, 0x7d, 0x90, 0xca, 0x8e, 0x03, 0x8e, 0xca, 0x94, 0xf8,
	0xe4, 0xe4, 0xbb, 0xf7, 0x1c, 0x19, 0x86, 0xfa, 0x28, 0x28, 0x53, 0xb3, 0x42, 0x49, 0x23, 0xb1,
	0xe3, 0x1e, 0xa3, 0x1b, 0xcd, 0xd4, 0x37, 0xa7, 0x4c, 0x57, 0x72, 0xfa, 0x0e, 0xc9, 0xba, 0xdc,
	0xef, 0x33, 0xf6, 0x55, 0x32, 0x6d, 0x70, 0x0c, 0x89, 0x37, 0xbc, 0xe5, 0x07, 0x46, 0xa2, 0x71,
	0x34, 0x19, 0x64, 0xa1, 0x84, 0x04, 0x7a, 0xb2, 0x30, 0x5c, 0x0a, 0x4d, 0x5a, 0xee, 0x6b, 0x7d,
	0x44, 0x84, 0xd8, 0xf0, 0x03, 0x23, 0x6d, 0x27, 0xbb, 0xf7, 0xf4, 0x27, 0x82, 0x64, 0x73, 0x14,
	0x74, 0x53, 0x11, 0xf0, 0x01, 0xae, 0xb7, 0xf2, 0x90, 0x73, 0xb1, 0x56, 0xf2, 0x93, 0x51, 0xe3,
	0x27, 0x34, 0x45, 0x9c, 0x42, 0xcf, 0x8f, 0x74, 0x33, 0x92, 0xf9, 0x5d, 0xb5, 0xed, 0x6c, 0xc5,
	0xa9, 0x92, 0x9e, 0x95, 0xd5, 0x1e, 0x7c, 0x86, 0x01, 0x17, 0xda, 0xe4, 0x82, 0x32, 0x4d, 0xda,
	0xe3, 0xf6, 0x24, 0x99, 0xdf, 0x5f, 0xf8, 0x61, 0xe9, 0x3d, 0xd9, 0xd9, 0x9d, 0xbe, 0x40, 0xdf,
	0xae, 0xb7, 0xc8, 0x4d, 0x8e, 0x33, 0xe8, 0xd7, 0xe5, 0x90, 0xc8, 0x51, 0xd0, 0x53, 0x82, 0x04,
	0xd9, 0xc9, 0x93, 0xfe, 0x46, 0x30, 0x5c, 0xe5, 0x45, 0xc1, 0xc5, 0xee, 0x55, 0x18, 0x75, 0xc4,
	0x11, 0xf4, 0x85, 0xdc, 0x86, 0xcd, 0x9d, 0xce, 0xff, 0x83, 0xb7, 0x2e, 0x05, 0x4f, 0x61, 0x28,
	0xd5, 0xae, 0xde, 0x77, 0xe1, 0xab, 0x6c, 0x68, 0x96, 0x24, 0xd5, 0xae, 0x0e, 0xb3, 0x5c, 0x90,
	0xb8, 0x22, 0x35, 0x44, 0x4b, 0xa2, 0xa5, 0x3a, 0x93, 0x3a, 0x15, 0x29, 0xd4, 0x2c, 0x89, 0x96,
	0x2a, 0x20, 0x75, 0x2b, 0x52, 0x43, 0x9c, 0x3f, 0x41, 0x6c, 0xf3, 0xe3, 0x14, 0x62, 0x7b, 0x53,
	0xb0, 0x2e, 0x25, 0xb8, 0x36, 0xa3, 0xdb, 0xa0, 0x28, 0xdb, 0x65, 0x7a, 0xf5, 0xd1, 0x75, 0xca,
	0xe3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xdc, 0x31, 0x80, 0x86, 0x02, 0x00, 0x00,
}
